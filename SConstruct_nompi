nameProgram = 'gujarat'

#agents = ['HunterGatherer','AgroPastoralist']
agents = ['HunterGatherer']
#namespaceAgents = ['Gujarat','Gujarat']
namespaceAgents = ['Gujarat']
world = 'GujaratWorld'
srcFiles = Split('main.cxx GujaratWorld.cxx GujaratConfig.cxx Climate.cxx GujaratAgent.cxx HunterGatherer.cxx MDPAction.cxx MoveHomeAction.cxx Sector.cxx ForageAction.cxx SettlementAreas.cxx HunterGathererMDPConfig.cxx HunterGathererMDPState.cxx HunterGathererMDPModel.cxx DoNothingAction.cxx AgentController.cxx HunterGathererProgrammedController.cxx HunterGathererDecisionTreeController.cxx HunterGathererMDPController.cxx GujaratDemographics.cxx OriginalDemographics.cxx CaloricRequirementsTable.cxx GujaratState.cxx HGMind.cxx HGOmniMindMap.cxx HGPartialMindMap.cxx HGMindFactory.cxx')

# APFiles = Split('APMoveHomeAction.cxx EstablishPlotAction.cxx SowAction.cxx HarvestAction.cxx MaintainPlotAction.cxx CultivatedField.cxx AgroPastoralist.cxx') 

libFiles = Split('../../World.cxx ../../Agent.cxx ../../Simulation.cxx ../../LoggerBase.cxx ../../Raster.cxx ../../StaticRaster.cxx ../../Statistics.cxx ../../IncrementalRaster.cxx ../../Config.cxx ../../RasterLoader.cxx ../../GeneralState.cxx ../../Action.cxx ../../ShpLoader.cxx')

srcFiles += libFiles


import os, sys
from subprocess import call

sys.path.append('../../scripts/')
import generateMpi 

release = ARGUMENTS.get('release', 1)
mareNostrum = ARGUMENTS.get('mn', 0)
extremeDebug = ARGUMENTS.get('edebug', 0)
useMpi = 0 

if int(useMpi) == 1:
	env = Environment(ENV=os.environ, CXX='mpicxx')
else:
	env = Environment(ENV=os.environ, CXX='g++')
	
generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml gdal pthread grass_gis grass_datetime boost_filesystem boost_system')
if int(release) == 0:
	env['CCFLAGS'] = Split('-g -O0 -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
else:
	env['CCFLAGS'] = Split('-O3 -DTIXML_USE_STL -fopenmp')

if int(useMpi)==1:
	env['CCFLAGS'] += ['-DPANDORAMPI']

includeDirs = Split('./ ../../ ../../../libs/libmdp/')

if int(mareNostrum)==1:	
	includeDirs += ['/gpfs/apps/HDF5/1.8.9/64/include']
	includeDirs += ['/gpfs/apps/BOOST/1_48_0/include/']
	includeDirs += ['/gpfs/apps/TINYXML/2.6.2/64/STL/include']
	includeDirs += ['/gpfs/apps/GDAL/1.7.1/64/include']	
	includeDirs += ['/gpfs/apps/GRASS/6.4.2/grass-6.4.2/include/']

	libDirs = Split('../../ /gpfs/apps/HDF5/1.8.9/64/lib /opt/ibmcmp/vacpp/10.1/lib64/ /gpfs/apps/GDAL/1.7.1/64/lib /gpfs/apps/TINYXML/2.6.2/64/STL/lib')
	libDirs += ['/gpfs/apps/GRASS/6.4.2/grass-6.4.2/lib/']
	libDirs += ['/gpfs/apps/BOOST/1_48_0/lib/']
	libs += ['gpfs']
	libs += ['xl']
else:
	includeDirs += ['/usr/lib/grass64/include/','/usr/include/gdal/']
	libDirs = ['../../','/usr/lib/grass64/lib/']
	libs += ['mpl']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")
env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)
env.Program(nameProgram, mpiAgentsSrc+srcFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

